{"version":3,"sources":["redux/actions.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["addContact","createAction","deleteContact","filter","ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","state","dispatch","useDispatch","handleChange","target","value","reset","onSubmit","e","preventDefault","isExistContact","items","find","contact","alert","actions","id","uuid","onChange","type","placeholder","pattern","title","required","ContactListItem","onClick","ContactList","allContacts","normalizedFilter","toLowerCase","includes","getVisibleContacts","map","Filter","currentTarget","App","itemReducer","createReducer","payload","filterReducer","_","combineReducers","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","phoneBookReducer","devTools","process","persistor","persistStore","console","log","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.6f020824.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit'\r\n\r\nconst addContact = createAction('contact/ADD')\r\n\r\nconst deleteContact = createAction('contact/Delete')\r\n\r\nconst filter = createAction('contact/filter')\r\n\r\nexport default { addContact, deleteContact, filter }\r\n","import { useSelector, useDispatch } from 'react-redux'\r\nimport { useState } from 'react'\r\nimport { v4 as uuid } from 'uuid'\r\n\r\nimport actions from '../../redux/actions'\r\nimport {} from 'react-redux'\r\n\r\nexport default function ContactForm() {\r\n\tconst [name, setName] = useState('')\r\n\tconst [number, setNumber] = useState('')\r\n\tconst contacts = useSelector((state) => state.contacts)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst handleChange = ({ target }) => {\r\n\t\tconst { name, value } = target\r\n\r\n\t\tswitch (name) {\r\n\t\t\tcase 'name':\r\n\t\t\t\tsetName(value)\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase 'number':\r\n\t\t\t\tsetNumber(value)\r\n\t\t\t\tbreak\r\n\r\n\t\t\tdefault:\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault()\r\n\t\tconst isExistContact = !!contacts.items.find(\r\n\t\t\t(contact) => contact.name === name\r\n\t\t)\r\n\t\tisExistContact && alert('Contact is already exist')\r\n\t\treturn (\r\n\t\t\t!isExistContact &&\r\n\t\t\tdispatch(actions.addContact({ id: uuid(), name, number })) &&\r\n\t\t\treset()\r\n\t\t)\r\n\t}\r\n\r\n\tconst reset = () => {\r\n\t\tsetName('')\r\n\t\tsetNumber('')\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<label>\r\n\t\t\t\tName\r\n\t\t\t\t<input\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tname=\"name\"\r\n\t\t\t\t\tplaceholder=\"Enter name\"\r\n\t\t\t\t\tpattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n\t\t\t\t\ttitle=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n\t\t\t\t\trequired\r\n\t\t\t\t/>\r\n\t\t\t</label>\r\n\r\n\t\t\t<label>\r\n\t\t\t\tNumber\r\n\t\t\t\t<input\r\n\t\t\t\t\tvalue={number}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\tname=\"number\"\r\n\t\t\t\t\tplaceholder=\"Enter number\"\r\n\t\t\t\t\tpattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n\t\t\t\t\ttitle=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n\t\t\t\t\trequired\r\n\t\t\t\t/>\r\n\t\t\t</label>\r\n\t\t\t<button type=\"submit\">Add contact</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\n//    без хуков\r\n\r\n// import { useState } from 'react'\r\n// import { v4 as uuid } from 'uuid'\r\n// import { connect } from 'react-redux'\r\n// import actions from '../../redux/actions'\r\n// import {  } from 'react-redux'\r\n\r\n// function ContactForm({ onAdd, contacts }) {\r\n// \tconst [name, setName] = useState('')\r\n// \tconst [number, setNumber] = useState('')\r\n\r\n// \tconst handleChange = ({ target }) => {\r\n// \t\tconst { name, value } = target\r\n\r\n// \t\tswitch (name) {\r\n// \t\t\tcase 'name':\r\n// \t\t\t\tsetName(value)\r\n// \t\t\t\tbreak\r\n\r\n// \t\t\tcase 'number':\r\n// \t\t\t\tsetNumber(value)\r\n// \t\t\t\tbreak\r\n\r\n// \t\t\tdefault:\r\n// \t\t}\r\n// \t}\r\n\r\n// \tconst handleSubmit = (e) => {\r\n// \t\te.preventDefault()\r\n// \t\tconst isExistContact = !!contacts.items.find(\r\n// \t\t\t(contact) => contact.name === name\r\n// \t\t)\r\n// \t\tisExistContact && alert('Contact is already exist')\r\n// \t\treturn !isExistContact && onAdd({ id: uuid(), name, number }) && reset()\r\n// \t}\r\n\r\n// \tconst reset = () => {\r\n// \t\tsetName('')\r\n// \t\tsetNumber('')\r\n// \t}\r\n\r\n// \treturn (\r\n// \t\t<form onSubmit={handleSubmit}>\r\n// \t\t\t<label>\r\n// \t\t\t\tName\r\n// \t\t\t\t<input\r\n// \t\t\t\t\tvalue={name}\r\n// \t\t\t\t\tonChange={handleChange}\r\n// \t\t\t\t\ttype=\"text\"\r\n// \t\t\t\t\tname=\"name\"\r\n// \t\t\t\t\tplaceholder=\"Enter name\"\r\n// \t\t\t\t\tpattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n// \t\t\t\t\ttitle=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n// \t\t\t\t\trequired\r\n// \t\t\t\t/>\r\n// \t\t\t</label>\r\n\r\n// \t\t\t<label>\r\n// \t\t\t\tNumber\r\n// \t\t\t\t<input\r\n// \t\t\t\t\tvalue={number}\r\n// \t\t\t\t\tonChange={handleChange}\r\n// \t\t\t\t\ttype=\"tel\"\r\n// \t\t\t\t\tname=\"number\"\r\n// \t\t\t\t\tplaceholder=\"Enter number\"\r\n// \t\t\t\t\tpattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n// \t\t\t\t\ttitle=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n// \t\t\t\t\trequired\r\n// \t\t\t\t/>\r\n// \t\t\t</label>\r\n// \t\t\t<button type=\"submit\">Add contact</button>\r\n// \t\t</form>\r\n// \t)\r\n// }\r\n\r\n// const mapStateToProps = (state) => ({\r\n// \tcontacts: state.contacts,\r\n// })\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n// \treturn {\r\n// \t\tonAdd: (data) => dispatch(actions.addContact(data)),\r\n// \t}\r\n// }\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm)\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport actions from '../../redux/actions'\r\n\r\nconst getVisibleContacts = (allContacts, filter) => {\r\n\tconst normalizedFilter = filter.toLowerCase()\r\n\r\n\treturn allContacts.filter((items) =>\r\n\t\titems.name.toLowerCase().includes(normalizedFilter)\r\n\t)\r\n}\r\n\r\nconst ContactList = () => {\r\n\tconst contacts = useSelector((state) =>\r\n\t\tgetVisibleContacts(state.contacts.items, state.contacts.filter)\r\n\t)\r\n\r\n\tif (contacts === []) return null\r\n\treturn (\r\n\t\t<ul>\r\n\t\t\t{contacts.map(({ id, name, number }) => (\r\n\t\t\t\t<ContactListItem id={id} name={name} number={number} />\r\n\t\t\t))}\r\n\t\t</ul>\r\n\t)\r\n}\r\n\r\nconst ContactListItem = ({ id, name, number }) => {\r\n\tconst dispatch = useDispatch()\r\n\r\n\treturn (\r\n\t\t<li>\r\n\t\t\t{name}:{number}\r\n\t\t\t<button onClick={() => dispatch(actions.deleteContact(id))}>\r\n\t\t\t\tdelete\r\n\t\t\t</button>\r\n\t\t</li>\r\n\t)\r\n}\r\n\r\nexport default ContactList\r\n\r\n// без хуков\r\n// import React from 'react'\r\n// import { connect } from 'react-redux'\r\n// import actions from '../../redux/actions'\r\n\r\n// const ContactList = ({ contacts, onRemove }) => {\r\n// \tif (contacts === []) return null\r\n// \treturn (\r\n// \t\t<ul>\r\n// \t\t\t{contacts.map(({ id, name, number }) => (\r\n// \t\t\t\t<ContactListItem\r\n// \t\t\t\t\tkey={id}\r\n// \t\t\t\t\tname={name}\r\n// \t\t\t\t\tnumber={number}\r\n// \t\t\t\t\tonRemove={() => onRemove(id)}\r\n// \t\t\t\t/>\r\n// \t\t\t))}\r\n// \t\t</ul>\r\n// \t)\r\n// }\r\n\r\n// const ContactListItem = ({ id, name, number, onRemove }) => {\r\n// \treturn (\r\n// \t\t<li>\r\n// \t\t\t{name}:{number} <button onClick={() => onRemove(id)}>delete</button>\r\n// \t\t</li>\r\n// \t)\r\n// }\r\n\r\n// const getVisibleContacts = (allContacts, filter) => {\r\n// \tconst normalizedFilter = filter.toLowerCase()\r\n\r\n// \treturn allContacts.filter((items) =>\r\n// \t\titems.name.toLowerCase().includes(normalizedFilter)\r\n// \t)\r\n// }\r\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n// \tcontacts: getVisibleContacts(items, filter),\r\n// })\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n// \treturn {\r\n// \t\tonRemove: (id) => dispatch(actions.deleteContact(id)),\r\n// \t}\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList)\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport actions from '../../redux/actions'\r\n\r\nconst Filter = () => {\r\n\tconst value = useSelector((state) => state.contacts.filter)\r\n\tconst dispatch = useDispatch()\r\n\treturn (\r\n\t\t<input\r\n\t\t\ttype=\"text\"\r\n\t\t\tname=\"filter\"\r\n\t\t\tvalue={value}\r\n\t\t\tonChange={(e) => dispatch(actions.filter(e.currentTarget.value))}\r\n\t\t\tplaceholder=\"Enter name for Search\"\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default Filter\r\n\r\n//  Без хуков\r\n\r\n// import React from 'react'\r\n// import { connect } from 'react-redux'\r\n// import actions from '../../redux/actions'\r\n\r\n// const Filter = ({ value, onChange }) => {\r\n// \treturn (\r\n// \t\t<input\r\n// \t\t\ttype=\"text\"\r\n// \t\t\tname=\"filter\"\r\n// \t\t\tvalue={value}\r\n// \t\t\tonChange={onChange}\r\n// \t\t\tplaceholder=\"Enter name for Search\"\r\n// \t\t/>\r\n// \t)\r\n// }\r\n\r\n// const mapStateToProps = (state) => ({\r\n// \tvalue: state.contacts.filter,\r\n// })\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n// \tonChange: (e) => dispatch(actions.filter(e.currentTarget.value)),\r\n// })\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter)\r\n","import ContactForm from './Components/ContactForm/ContactForm'\nimport ContactList from './Components/ContactList/ContactList'\nimport Filter from './Components/Filter/Filter'\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<h2>Phonebook</h2>\n\t\t\t<ContactForm />\n\n\t\t\t<h2>Contacts</h2>\n\t\t\t<Filter />\n\t\t\t<ContactList />\n\t\t</div>\n\t)\n}\n\nexport default App\n","import { combineReducers } from 'redux'\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport actions from './actions'\r\n\r\nconst itemReducer = createReducer([], {\r\n\t[actions.addContact]: (state, { payload }) => [...state, { ...payload }],\r\n\t[actions.deleteContact]: (state, { payload }) =>\r\n\t\tstate.filter(({ id }) => id !== payload),\r\n})\r\n\r\nconst filterReducer = createReducer('', {\r\n\t[actions.filter]: (_, { payload }) => payload,\r\n})\r\n\r\nexport default combineReducers({\r\n\titems: itemReducer,\r\n\tfilter: filterReducer,\r\n})\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\nimport logger from 'redux-logger'\r\nimport {\r\n\tpersistStore,\r\n\tpersistReducer,\r\n\tFLUSH,\r\n\tREHYDRATE,\r\n\tPAUSE,\r\n\tPERSIST,\r\n\tPURGE,\r\n\tREGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport phoneBookReducer from '../redux/reducers'\r\n\r\nconst persistConfig = {\r\n\tkey: 'contacts',\r\n\tstorage,\r\n\tblacklist: ['filter'],\r\n}\r\n\r\nconst middleware = [\r\n\t...getDefaultMiddleware({\r\n\t\tserializableCheck: {\r\n\t\t\tignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n\t\t},\r\n\t}),\r\n\tlogger,\r\n]\r\n\r\nconst store = configureStore({\r\n\treducer: { contacts: persistReducer(persistConfig, phoneBookReducer) },\r\n\tdevTools: process.env.NODE_ENV === 'development',\r\n\tmiddleware,\r\n})\r\n\r\nconst persistor = persistStore(store)\r\n\r\nexport default { store, persistor }\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport store from './redux/store'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { Provider } from 'react-redux'\n\nconsole.log('store', store)\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store.store}>\n\t\t\t<PersistGate loading={null} persistor={store.persistor}>\n\t\t\t\t<App />\n\t\t\t</PersistGate>\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}